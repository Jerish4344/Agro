# Generated by Django 5.0.6 on 2025-09-26 11:20

from django.db import migrations
import csv
import os
from django.conf import settings


def populate_hierarchical_data(apps, schema_editor):
    """Populate MainCategory, SubCategory with data from CSV and update existing products"""
    
    # Get model classes
    MainCategory = apps.get_model('core', 'MainCategory')
    SubCategory = apps.get_model('core', 'SubCategory')
    ProductCategory = apps.get_model('core', 'ProductCategory')
    Product = apps.get_model('core', 'Product')
    
    # Create the main category "Fruit N Vegetable" (from your CSV data)
    main_category, _ = MainCategory.objects.get_or_create(
        code='FRUIT_N_VEGETABLE',
        defaults={'name': 'Fruit N Vegetable'}
    )
    
    # Get existing categories
    fruits_category = ProductCategory.objects.get(code='FRUITS')
    vegetables_category = ProductCategory.objects.get(code='VEGETABLES')
    
    # Define subcategory mapping based on your CSV data
    subcategory_data = {
        # Fruits subcategories
        'Apple N Pear': 'FRUITS',
        'Bananas': 'FRUITS',
        'Temperate Fruit': 'FRUITS',
        'Exotic Fruit': 'FRUITS',
        'Tropical Fruit': 'FRUITS',
        'Regular Fruit': 'FRUITS',
        'Seasonal Fruit': 'FRUITS',
        'Pomegranate': 'FRUITS',
        'Citrus': 'FRUITS',
        'Melons': 'FRUITS',
        'Grape': 'FRUITS',
        'Mangoes': 'FRUITS',
        'Imported Fruit': 'FRUITS',
        'Berries': 'FRUITS',
        'Stone Fruit': 'FRUITS',
        'Pre Cut Fruit Pack': 'FRUITS',
        
        # Vegetables subcategories
        'Onion': 'VEGETABLES',
        'Potato': 'VEGETABLES',
        'Tomato': 'VEGETABLES',
        'Root Veg': 'VEGETABLES',
        'Tropical Veg': 'VEGETABLES',
        'Beans N Seed': 'VEGETABLES',
        'Basic Veg': 'VEGETABLES',
        'Garlic': 'VEGETABLES',
        'Temperate Veg': 'VEGETABLES',
        'Coconut': 'VEGETABLES',
        'Exotic Veg': 'VEGETABLES',
        'Fresh Condiment': 'VEGETABLES',
        'Gourd': 'VEGETABLES',
        'Leafy Veg': 'VEGETABLES',
        'Exotic Leafy': 'VEGETABLES',
        'Pre Cut Veg': 'VEGETABLES',
        'Veg Flower': 'VEGETABLES',
    }
    
    # Create subcategories
    subcategory_objects = {}
    for subcat_name, cat_code in subcategory_data.items():
        category = fruits_category if cat_code == 'FRUITS' else vegetables_category
        subcat_code = subcat_name.upper().replace(' ', '_').replace('&', 'N')
        
        subcategory, created = SubCategory.objects.get_or_create(
            code=subcat_code,
            defaults={
                'name': subcat_name,
                'category': category,
                'main_category': main_category
            }
        )
        subcategory_objects[subcat_name] = subcategory
    
    # Create a default "General" subcategory for any products that don't match
    general_fruits_subcat, _ = SubCategory.objects.get_or_create(
        code='GENERAL_FRUITS',
        defaults={
            'name': 'General Fruits',
            'category': fruits_category,
            'main_category': main_category
        }
    )
    
    general_vegetables_subcat, _ = SubCategory.objects.get_or_create(
        code='GENERAL_VEGETABLES',
        defaults={
            'name': 'General Vegetables',
            'category': vegetables_category,
            'main_category': main_category
        }
    )
    
    # Update existing products with default subcategories
    # This gives them valid relationships that can be corrected later with proper data import
    for product in Product.objects.all():
        if product.category.code == 'FRUITS':
            product.main_category = main_category
            product.sub_category = general_fruits_subcat
        else:
            product.main_category = main_category
            product.sub_category = general_vegetables_subcat
        product.save()


def reverse_populate_hierarchical_data(apps, schema_editor):
    """Reverse the population - clean up the hierarchical data"""
    MainCategory = apps.get_model('core', 'MainCategory')
    SubCategory = apps.get_model('core', 'SubCategory')
    
    # Remove all hierarchical data
    SubCategory.objects.all().delete()
    MainCategory.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0004_add_hierarchical_models"),
    ]

    operations = [
        migrations.RunPython(
            populate_hierarchical_data,
            reverse_populate_hierarchical_data
        ),
    ]
